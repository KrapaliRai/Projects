/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Volunteer;

import Business.EcoSystem;
import Business.Enterprise.DRCEnterprise;
import Business.Enterprise.Enterprise;
import Business.Enterprise.NGOEnterprise;
import Business.Inventory.Patient;
import Business.Network.Network;
import Business.Organization.DRCManagerOrganization;
import Business.Organization.NGOAdminOrganization;

import Business.Organization.Organization;
import Business.Organization.VolunteerOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DRCWorkRequest;
import Business.WorkQueue.PatientWorkRequest1;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Preethi Jerome
 */
public class ViewRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewRequestJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private EcoSystem business;
    private ArrayList<WorkRequest> ngoWorkRequests;
    private ArrayList<WorkRequest> drcWorkRequests;

    public ViewRequestJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.ngoWorkRequests = new ArrayList<WorkRequest>();
        this.drcWorkRequests = new ArrayList<WorkRequest>();
        updateWorkList();
        populateTable();
    }

    public  void updateWorkList() {
        Organization ngo = null, drc = null;
        for (Network networkObj : business.getNetworkList()) {
            for (Enterprise enterpriseObj : networkObj.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterpriseObj instanceof NGOEnterprise) {
                    for (Organization org : enterpriseObj.getOrganizationDirectory().getOrganizationList()) {
                        if (org instanceof NGOAdminOrganization)
                            ngo = org;
                    }
                } else if (enterpriseObj instanceof DRCEnterprise) {
                    for (Organization org : enterpriseObj.getOrganizationDirectory().getOrganizationList()) {
                        if (org instanceof DRCManagerOrganization)
                            drc = org;
                    }
                }
            }
        }
        ngoWorkRequests.addAll(ngo.getWorkQueue().getWorkRequestList());
        drcWorkRequests.addAll(drc.getWorkQueue().getWorkRequestList());
    }
    
    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) providerRequestJtable.getModel();
        dtm.setRowCount(0);

        for (WorkRequest request : ngoWorkRequests) {
            Object[] row = new Object[5];
            PatientWorkRequest1 patientWorkRequest = (PatientWorkRequest1) request;
            if(request.getVolunteer() == userAccount) {
                Patient person = patientWorkRequest.getPerson();
                row[0] = person.getName();
                row[1] = patientWorkRequest.getDisability();
                row[2] = patientWorkRequest.getSender().getEmployee().getName();
                row[3] = patientWorkRequest.getReceiver() == null ? 
                        "n/a" : patientWorkRequest.getReceiver().getUsername();
                row[4] = patientWorkRequest.getStatus();
                dtm.addRow(row);
            }            
        }
        for (WorkRequest request : drcWorkRequests) {
            Object[] row = new Object[5];
            DRCWorkRequest patientWorkRequest = (DRCWorkRequest) request;
            if(request.getVolunteer() == userAccount) {
                Patient person = patientWorkRequest.getPerson();
                row[0] = person.getName();
                row[1] = patientWorkRequest.getDisability();
                row[2] = patientWorkRequest.getSender().getEmployee().getName();
                row[3] = patientWorkRequest.getReceiver() == null ? 
                        "n/a" : patientWorkRequest.getReceiver();
                row[4] = patientWorkRequest.getStatus();
                dtm.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        refreshJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        providerRequestJtable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        jPanel1.add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 560, -1, -1));

        providerRequestJtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Request", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(providerRequestJtable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, 870, 320));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("View Raised Request");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, 380, 30));

        jButton1.setText("<<Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 120, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 920, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 673, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 653, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 20, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable providerRequestJtable;
    private javax.swing.JButton refreshJButton;
    // End of variables declaration//GEN-END:variables
}
